var search_data = {"index":{"searchIndex":["card","dealer","deck","player","runo","runocards","string","after_turn()","before_turn()","bg_black()","bg_blue()","bg_brown()","bg_cyan()","bg_gray()","bg_green()","bg_magenta()","bg_red()","black()","blink()","blue()","bold()","card_string()","change_direction()","create_deck()","create_deck()","create_players()","cyan()","deal_cards()","draw_card()","draw_card()","draw_card()","draw_four()","draw_two()","face_color()","face_value()","find_color_playable()","find_like_playable()","game_init()","gray()","green()","increment_player()","initial_card_rules()","italic()","length()","log_after_turn()","log_before_turn()","magenta()","new()","new()","new()","new()","new()","play_card()","play_game()","point_value()","points()","points()","preferred_color()","red()","reverse()","reverse_color()","set_defaults()","shuffle()","skip()","sort_value()","to_s()","to_s()","underline()","which_card()","winner()","yellow()","gemfile","gemfile.lock","readme","rakefile","todo","card.rbs","dealer.rbs","deck.rbs","multirun.rbs","player.rbs","runo.rbs"],"longSearchIndex":["card","dealer","deck","player","runo","runocards","string","dealer#after_turn()","dealer#before_turn()","string#bg_black()","string#bg_blue()","string#bg_brown()","string#bg_cyan()","string#bg_gray()","string#bg_green()","string#bg_magenta()","string#bg_red()","string#black()","string#blink()","string#blue()","string#bold()","card#card_string()","dealer#change_direction()","dealer#create_deck()","deck#create_deck()","dealer#create_players()","string#cyan()","dealer#deal_cards()","dealer#draw_card()","deck#draw_card()","player#draw_card()","dealer#draw_four()","dealer#draw_two()","card#face_color()","card#face_value()","player#find_color_playable()","player#find_like_playable()","dealer#game_init()","string#gray()","string#green()","dealer#increment_player()","dealer#initial_card_rules()","string#italic()","deck#length()","dealer#log_after_turn()","dealer#log_before_turn()","string#magenta()","card::new()","dealer::new()","deck::new()","player::new()","runo::new()","player#play_card()","dealer#play_game()","card#point_value()","dealer#points()","player#points()","player#preferred_color()","string#red()","dealer#reverse()","string#reverse_color()","dealer#set_defaults()","deck#shuffle()","dealer#skip()","card#sort_value()","card#to_s()","player#to_s()","string#underline()","player#which_card()","dealer#winner()","string#yellow()","","","","","","","","","","",""],"info":[["Card","","Card.html","","<p>Card class represents a single card in the deck\n"],["Dealer","","Dealer.html","","<p>to play game = Dealer.new(log: log, players: [‘Mark’, ‘Wesley’, ‘Josh’, ‘Mingjia’]) …\n"],["Deck","","Deck.html","","<p>Stack of cards, may be multiple decks actually\n"],["Player","","Player.html","","<p>Runo Player\n"],["Runo","","Runo.html","","<p>Class for running a single game\n"],["RunoCards","","RunoCards.html","","<p>Module to hold card constants\n"],["String","","String.html","","<p>Adding color options for strings\n"],["after_turn","Dealer","Dealer.html#method-i-after_turn","()","<p>After lay down complete, we need to see if special cards need to be addressed\n"],["before_turn","Dealer","Dealer.html#method-i-before_turn","()","<p>before we start our turn, do we need to handle any special cards\n"],["bg_black","String","String.html#method-i-bg_black","(= \"\\e[40m#{self}\\e[0m\")","<p>Bg Black\n"],["bg_blue","String","String.html#method-i-bg_blue","(= \"\\e[44m#{self}\\e[0m\")","<p>Bg Blue\n"],["bg_brown","String","String.html#method-i-bg_brown","(= \"\\e[43m#{self}\\e[0m\")","<p>Bg Brown\n"],["bg_cyan","String","String.html#method-i-bg_cyan","(= \"\\e[46m#{self}\\e[0m\")","<p>Bg Cyan\n"],["bg_gray","String","String.html#method-i-bg_gray","(= \"\\e[47m#{self}\\e[0m\")","<p>Bg Gray\n"],["bg_green","String","String.html#method-i-bg_green","(= \"\\e[42m#{self}\\e[0m\")","<p>Bg Green\n"],["bg_magenta","String","String.html#method-i-bg_magenta","(= \"\\e[45m#{self}\\e[0m\")","<p>Bg Magenta\n"],["bg_red","String","String.html#method-i-bg_red","(= \"\\e[41m#{self}\\e[0m\")","<p>Bg Red\n"],["black","String","String.html#method-i-black","(= \"\\e[30m\\e[47m#{self}\\e[0m\")","<p>Black\n"],["blink","String","String.html#method-i-blink","(= \"\\e[5m#{self}\\e[25m\")","<p>Blink\n"],["blue","String","String.html#method-i-blue","(= \"\\e[36m#{self}\\e[0m\")","<p>Blue\n"],["bold","String","String.html#method-i-bold","(= \"\\e[1m#{self}\\e[22m\")","<p>Bold\n"],["card_string","Card","Card.html#method-i-card_string","()","<p>string representation of card\n"],["change_direction","Dealer","Dealer.html#method-i-change_direction","()","<p>reverse direction\n"],["create_deck","Dealer","Dealer.html#method-i-create_deck","(card_decks)","<p>Create the card deck and shuffle it\n"],["create_deck","Deck","Deck.html#method-i-create_deck","(number_of_decks = 1)","<p>creates a deck or decks and shuffles them\n"],["create_players","Dealer","Dealer.html#method-i-create_players","(players)","<p>Create the player objects\n"],["cyan","String","String.html#method-i-cyan","(= \"\\e[36m#{self}\\e[0m\")","<p>Cyan\n"],["deal_cards","Dealer","Dealer.html#method-i-deal_cards","()","<p>Deal cards to the players\n"],["draw_card","Dealer","Dealer.html#method-i-draw_card","()","<p>draw one card from the deck and return it\n"],["draw_card","Deck","Deck.html#method-i-draw_card","()","<p>draw a single card from the deck\n"],["draw_card","Player","Player.html#method-i-draw_card","(num_cards = 1)","<p>draw a card from the deck\n"],["draw_four","Dealer","Dealer.html#method-i-draw_four","()","<p>Draw four has been played\n"],["draw_two","Dealer","Dealer.html#method-i-draw_two","()","<p>Draw two has been played\n"],["face_color","Card","Card.html#method-i-face_color","()","<p>returns card color\n"],["face_value","Card","Card.html#method-i-face_value","()","<p>returns internal value of card\n"],["find_color_playable","Player","Player.html#method-i-find_color_playable","(top_card)","<p>which of my cards match top card\n"],["find_like_playable","Player","Player.html#method-i-find_like_playable","(top_card)","<p>which of my cards match value of top card\n"],["game_init","Dealer","Dealer.html#method-i-game_init","(log, players)","<p>Create a game, deck, shuffle, and deal cards\n"],["gray","String","String.html#method-i-gray","(= \"\\e[37m#{self}\\e[0m\")","<p>Gray\n"],["green","String","String.html#method-i-green","(= \"\\e[32m#{self}\\e[0m\")","<p>Green\n"],["increment_player","Dealer","Dealer.html#method-i-increment_player","()","<p>next player in the current direction\n"],["initial_card_rules","Dealer","Dealer.html#method-i-initial_card_rules","()","<p>Published rules for what to do if top card is reverse, skip, wild, etc\n"],["italic","String","String.html#method-i-italic","(= \"\\e[3m#{self}\\e[23m\")","<p>Italic\n"],["length","Deck","Deck.html#method-i-length","()","<p>how many cards in the deck\n"],["log_after_turn","Dealer","Dealer.html#method-i-log_after_turn","(lay_down)","<p>Log status after player’s turn\n"],["log_before_turn","Dealer","Dealer.html#method-i-log_before_turn","()","<p>Log some initial pre turn data\n"],["magenta","String","String.html#method-i-magenta","(= \"\\e[35m#{self}\\e[0m\")","<p>Magenta\n"],["new","Card","Card.html#method-c-new","(internal_value, color)","<p>New args internal_value and color\n"],["new","Dealer","Dealer.html#method-c-new","(log:, players:)","<p>Create dealer, deck, add players\n"],["new","Deck","Deck.html#method-c-new","(log, number_of_decks = 1)","<p>Creates a deck or decks and shuffles it/them\n"],["new","Player","Player.html#method-c-new","(log:, name:, dealer:)","<p>create new player\n"],["new","Runo","Runo.html#method-c-new","(log: Logger.new('log/runo.log', 3, 1_024_000 * 3), players: %w[Mark Wesley Josh Kim Nick])","<p>start a test\n"],["play_card","Player","Player.html#method-i-play_card","(top_card)","<p>play a card if you can (color/like match)\n"],["play_game","Dealer","Dealer.html#method-i-play_game","()","<p>Play one game of uno\n"],["point_value","Card","Card.html#method-i-point_value","()","<p>Point value is 50 for wild cards, 20 for reverse/skip/draw 2, face value for others\n"],["points","Dealer","Dealer.html#method-i-points","()","<p>points in the remaining players hands\n"],["points","Player","Player.html#method-i-points","()","<p>player currently has cards worth x points\n"],["preferred_color","Player","Player.html#method-i-preferred_color","()","<p>player just played a wild card and prefers color ?\n"],["red","String","String.html#method-i-red","(= \"\\e[31m#{self}\\e[0m\")","<p>Red\n"],["reverse","Dealer","Dealer.html#method-i-reverse","()","<p>Reverse has been played\n"],["reverse_color","String","String.html#method-i-reverse_color","(= \"\\e[7m#{self}\\e[27m\")","<p>Reverse color\n"],["set_defaults","Dealer","Dealer.html#method-i-set_defaults","()","<p>Set some instance defaults for one game\n"],["shuffle","Deck","Deck.html#method-i-shuffle","()","<p>shuffle the cards in the deck\n"],["skip","Dealer","Dealer.html#method-i-skip","()","<p>Skip card has been played\n"],["sort_value","Card","Card.html#method-i-sort_value","()","<p>returns a random number between 0 and 1000, used for shuffling\n"],["to_s","Card","Card.html#method-i-to_s","()","<p>returns a string representation of the card\n"],["to_s","Player","Player.html#method-i-to_s","()","<p>string representation of player\n"],["underline","String","String.html#method-i-underline","(= \"\\e[4m#{self}\\e[24m\")","<p>Underline\n"],["which_card","Player","Player.html#method-i-which_card","(top_card)","<p>determine if player has a card they can play\n"],["winner","Dealer","Dealer.html#method-i-winner","()","<p>return winner of the game\n"],["yellow","String","String.html#method-i-yellow","(= \"\\e[33m#{self}\\e[0m\")","<p>Yellow\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source ‘rubygems.org’\n<p>gem ‘logger’ gem ‘pry’ gem …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  ast (2.4.2)\n  coderay (1.1.3)\n  diff-lcs (1.5.0)\n  logger (1.5.1) ...</pre>\n"],["README","","README_rdoc.html","","<p>Ruby Uno\n"],["Rakefile","","Rakefile.html","","<p># frozen_string_literal: true\n<p>desc ‘Remove logs’ task :rm_logs do\n\n<pre>puts &#39;Removing logs&#39;\nfiles = ...</pre>\n"],["TODO","","TODO_rdoc.html","","<p>Add human player\n\n"],["card.rbs","","sig/card_rbs.html","","<p># TypeProf 0.21.4\n<p># Classes class Card\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-value\">color:</span> <span class=\"ruby-constant\">Integer</span>\n<span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-value\">internal_value:</span> <span class=\"ruby-constant\">Integer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dealer.rbs","","sig/dealer_rbs.html","","<p>class Dealer\n\n<pre>@winner: bool\n@direction_name: String\n@top_card: Card\n@player: Player\n@game_end: Time\n\nattr_accessor ...</pre>\n"],["deck.rbs","","sig/deck_rbs.html","","<p>class Deck\n\n<pre>attr_accessor cards: Array[Card]\ndef initialize: (Integer number_of_decks) -&gt; void\ndef create_deck: ...</pre>\n"],["multirun.rbs","","sig/multirun_rbs.html","","<p>class TestRun\n\n<pre>@log: Logger\n\nattr_accessor game: Dealer\ndef initialize: (log: Logger) -&gt; void</pre>\n<p>end\n"],["player.rbs","","sig/player_rbs.html","","<p>class Player\n\n<pre>@total_points: Complex | Float | Integer | Rational\n\nattr_accessor name: String\nattr_accessor ...</pre>\n"],["runo.rbs","","sig/runo_rbs.html","","<p>module Runo\n\n<pre>CARDS: [Integer, Integer, Integer, Integer, Integer, Integer,\n        Integer, Integer, Integer, ...</pre>\n"]]}}