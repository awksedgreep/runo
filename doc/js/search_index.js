var search_data = {"index":{"searchIndex":["card","dealer","deck","object","player","testrun","change_direction()","create_deck()","draw_card()","draw_card()","draw_card()","each_card()","face_color()","face_value()","find_color_playable()","find_like_playable()","increment_player()","length()","new()","new()","new()","new()","new()","play_card()","point_value()","points()","points()","preferred_color()","shuffle()","sort_val()","to_s()","to_s()","which_card()","winner()","gemfile","gemfile.lock","readme","rakefile","todo","card.rbs","dealer.rbs","deck.rbs","multirun.rbs","player.rbs","player.rbs"],"longSearchIndex":["card","dealer","deck","object","player","testrun","dealer#change_direction()","deck#create_deck()","dealer#draw_card()","deck#draw_card()","player#draw_card()","deck#each_card()","card#face_color()","card#face_value()","player#find_color_playable()","player#find_like_playable()","dealer#increment_player()","deck#length()","card::new()","dealer::new()","deck::new()","player::new()","testrun::new()","player#play_card()","card#point_value()","dealer#points()","player#points()","player#preferred_color()","deck#shuffle()","card#sort_val()","card#to_s()","player#to_s()","player#which_card()","dealer#winner()","","","","","","","","","","",""],"info":[["Card","","Card.html","","<p>Card class represents a single card in the deck\n"],["Dealer","","Dealer.html","","<p>to play game = Dealer.new(log: log, players: [‘Mark’, ‘Wesley’, ‘Josh’, ‘Mingjia’]) …\n"],["Deck","","Deck.html","","<p>Stack of cards, may be multiple decks actually\n"],["Object","","Object.html","",""],["Player","","Player.html","","<p>Runo Player\n"],["TestRun","","TestRun.html","","<p>Class for running a single game\n"],["change_direction","Dealer","Dealer.html#method-i-change_direction","()","<p>reverse direction\n"],["create_deck","Deck","Deck.html#method-i-create_deck","(number_of_decks = 1)","<p>creates a deck or decks and shuffles them\n"],["draw_card","Dealer","Dealer.html#method-i-draw_card","()","<p>draw one card from the deck and return it\n"],["draw_card","Deck","Deck.html#method-i-draw_card","()","<p>draw a single card from the deck\n"],["draw_card","Player","Player.html#method-i-draw_card","(num_cards = 1)","<p>draw a card from the deck\n"],["each_card","Deck","Deck.html#method-i-each_card","()","<p>iterate over the deck\n"],["face_color","Card","Card.html#method-i-face_color","()","<p>returns card color\n"],["face_value","Card","Card.html#method-i-face_value","()","<p>returns internal value of card\n"],["find_color_playable","Player","Player.html#method-i-find_color_playable","(top_card)","<p>which of my cards match top card\n"],["find_like_playable","Player","Player.html#method-i-find_like_playable","(top_card)","<p>which of my cards match value of top card\n"],["increment_player","Dealer","Dealer.html#method-i-increment_player","()","<p>next player in the current direction\n"],["length","Deck","Deck.html#method-i-length","()","<p>how many cards in the deck\n"],["new","Card","Card.html#method-c-new","(internal_value, color)","<p>New args internal_value and color\n"],["new","Dealer","Dealer.html#method-c-new","(log:, players:)","<p>Create dealer, deck, add players\n"],["new","Deck","Deck.html#method-c-new","(number_of_decks = 1)","<p>Creates a deck or decks and shuffles it/them\n"],["new","Player","Player.html#method-c-new","(log:, name:, dealer:)","<p>create new player\n"],["new","TestRun","TestRun.html#method-c-new","(log:)","<p>start a test\n"],["play_card","Player","Player.html#method-i-play_card","(top_card)","<p>play a card if you can (color/like match)\n"],["point_value","Card","Card.html#method-i-point_value","()","<p>Point value is 50 for wild cards, 20 for reverse/skip/draw 2, face value for others\n"],["points","Dealer","Dealer.html#method-i-points","()","<p>points in the remaining players hands\n"],["points","Player","Player.html#method-i-points","()","<p>player currently has cards worth x points\n"],["preferred_color","Player","Player.html#method-i-preferred_color","()","<p>player just played a wild card and prefers color ?\n"],["shuffle","Deck","Deck.html#method-i-shuffle","()","<p>shuffle the cards in the deck\n"],["sort_val","Card","Card.html#method-i-sort_val","()","<p>returns a random number between 0 and 1000, used for shuffling\n"],["to_s","Card","Card.html#method-i-to_s","()","<p>returns a string representation of the card\n"],["to_s","Player","Player.html#method-i-to_s","()","<p>string representation of player\n"],["which_card","Player","Player.html#method-i-which_card","(top_card)","<p>determine if player has a card they can play\n"],["winner","Dealer","Dealer.html#method-i-winner","()","<p>return winner of the game\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source ‘rubygems.org’\n<p>gem ‘logger’ gem ‘rubocop’ …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  ast (2.4.2)\n  logger (1.5.1)\n  parallel (1.22.1)\n  parser (3.1.2.0) ...</pre>\n"],["README","","README_rdoc.html","","<p>Ruby Uno\n"],["Rakefile","","Rakefile.html","","<p># frozen_string_literal: true\n<p>desc ‘Remove logs’ task :rm_logs do\n\n<pre>puts &#39;Removing logs&#39;\nfiles = ...</pre>\n"],["TODO","","TODO_rdoc.html","","<p>Add human player\n\n"],["card.rbs","","card_rbs.html","","<p># TypeProf 0.21.4\n<p># Classes class Card\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-value\">color:</span> <span class=\"ruby-constant\">Integer</span>\n<span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-value\">internal_value:</span> <span class=\"ruby-constant\">Integer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dealer.rbs","","dealer_rbs.html","","<p>class Dealer\n\n<pre>@winner: bool\n@direction_name: String\n@top_card: Card\n@player: Player\n@game_end: Time\n\nattr_accessor ...</pre>\n"],["deck.rbs","","deck_rbs.html","","<p>class Deck\n\n<pre>attr_accessor cards: Array[Card]\ndef initialize: (Integer number_of_decks) -&gt; void\ndef create_deck: ...</pre>\n"],["multirun.rbs","","multirun_rbs.html","","<p>class TestRun\n\n<pre>@log: Logger\n\nattr_accessor game: Dealer\ndef initialize: (log: Logger) -&gt; void</pre>\n<p>end\n"],["player.rbs","","player_rbs.html","","<p>class Player\n\n<pre>@total_points: Complex | Float | Integer | Rational\n\nattr_accessor name: String\nattr_accessor ...</pre>\n"],["player.rbs","","sig/player_rbs.html","","<p>class Player\n\n<pre>@color_playable: untyped</pre>\n<p>end\n"]]}}